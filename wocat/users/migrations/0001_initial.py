# -*- coding: utf-8 -*-
# Generated by Django 1.11.6 on 2018-03-06 11:17
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import easy_thumbnails.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('institutions', '0001_initial'),
        ('countries', '0001_initial'),
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='Email address')),
                ('first_name', models.CharField(blank=True, max_length=50, verbose_name='First name')),
                ('last_name', models.CharField(blank=True, max_length=50, verbose_name='Last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('gender', models.CharField(blank=True, choices=[('m', 'Mr'), ('f', 'Mrs')], max_length=1, verbose_name='Salutation')),
                ('title', models.CharField(blank=True, max_length=255, verbose_name='Title')),
                ('position', models.CharField(blank=True, max_length=255, verbose_name='Position')),
                ('department', models.CharField(blank=True, max_length=255, verbose_name='Department')),
                ('function', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'SLM specialists field level'), (2, 'SLM specialists (sub-)national level'), (3, 'SLM specialists regional and global levels')], null=True, verbose_name='Your function')),
                ('address', models.CharField(blank=True, max_length=255, verbose_name='Address Information')),
                ('address_2', models.CharField(blank=True, max_length=255, verbose_name='Address 2')),
                ('postal_code', models.CharField(blank=True, max_length=255, verbose_name='Postal code')),
                ('city', models.CharField(blank=True, max_length=255, verbose_name='City')),
                ('phone', models.CharField(blank=True, max_length=255, verbose_name='Phone')),
                ('phone_2', models.CharField(blank=True, max_length=255, verbose_name='Phone 2')),
                ('fax', models.CharField(blank=True, max_length=255, verbose_name='Fax')),
                ('fax_2', models.CharField(blank=True, max_length=255, verbose_name='Fax 2')),
                ('second_email', models.EmailField(blank=True, max_length=254, verbose_name='Second email')),
                ('language', models.CharField(choices=[('en', 'English'), ('fr', 'French'), ('es', 'Spanish')], default='en', max_length=2, verbose_name='Language')),
                ('comments', models.TextField(blank=True, verbose_name='Comments')),
                ('avatar', easy_thumbnails.fields.ThumbnailerImageField(blank=True, upload_to='users/avatars', verbose_name='avatar')),
                ('newsletter', models.BooleanField(default=True, verbose_name='Newsletter subscription')),
                ('terms_and_conditions', models.BooleanField(default=False, verbose_name='Accepted terms and conditions')),
                ('deprecated', models.TextField(blank=True, verbose_name='Deprecated data')),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='countries.Country')),
            ],
            options={
                'verbose_name_plural': 'Users',
                'verbose_name': 'User',
                'abstract': False,
                'ordering': ('first_name', 'last_name'),
            },
        ),
        migrations.CreateModel(
            name='UserExperience',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Experience')),
            ],
        ),
        migrations.CreateModel(
            name='UserKeyWorkTopic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Key work topics')),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='experiences',
            field=models.ManyToManyField(blank=True, to='users.UserExperience'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='institution',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='institutions.Institution'),
        ),
        migrations.AddField(
            model_name='user',
            name='key_work_topics',
            field=models.ManyToManyField(blank=True, to='users.UserKeyWorkTopic'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
